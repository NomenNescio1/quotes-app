{"version":3,"sources":["serviceWorker.js","index.js","Quotes.js"],"names":["Boolean","window","location","hostname","match","ReactDOM","render","useState","content","autor","image","quote","setQuote","newQuote","setNewQuote","useEffect","a","async","fetch","response","json","data","character","fetchData","className","style","background","length","onClick","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2QAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,mBCHM,WAAO,IAAD,EAEAC,mBAAS,CACjCC,QAAS,GACTC,MAAO,GACPC,MAAO,KALiB,mBAEnBC,EAFmB,KAEZC,EAFY,OAOML,oBAAS,GAPf,mBAOnBM,EAPmB,KAOTC,EAPS,KAuB1B,OAdAC,qBAAU,YACR,qBAAAC,EAAAC,OAAA,kEAAAD,EAAA,MACyBE,MAAM,iDAD/B,cACQC,EADR,kBAAAH,EAAA,MAEqBG,EAASC,QAF9B,OAEQC,EAFR,OAGET,EAAS,CACPJ,QAASa,EAAK,GAAGV,MACjBF,MAAOY,EAAK,GAAGC,UACfZ,MAAOW,EAAK,GAAGX,QANnB,qCAUAa,KACC,CAACV,IAGF,yBAAKW,UAAU,OACb,+DACA,8CACA,yBAAKA,UAAU,YAAYC,MAAO,CAAEC,WAAW,OAAD,OAASf,EAAMD,MAAf,2BAC5C,yBAAKc,UAAU,UACZb,EAAMH,QAAQmB,OAAS,GACtB,6BACE,oCACE,2BAAIhB,EAAMH,SACV,0CAAWG,EAAMF,QAEnB,0BAAMe,UAAU,YAAYI,QAAS,kBAAMd,GAAaD,KAAxD,uBDhCE,MAAYgB,SAASC,eAAe,SD6H9C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.a164a6f8.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Quotes } from './Quotes';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Quotes />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { useEffect, useState } from 'react';\nimport './App.css';\n\nexport const Quotes = () => {\n\n  const [quote, setQuote] = useState({\n    content: '',\n    autor: '',\n    image: ''\n  });\n  const [newQuote, setNewQuote] = useState(false);\n\n  useEffect(() => {\n    async function fetchData() {\n      const response = await fetch('https://thesimpsonsquoteapi.glitch.me/quotes');\n      const data = await response.json();\n      setQuote({\n        content: data[0].quote,\n        autor: data[0].character,\n        image: data[0].image\n      })\n    }\n\n    fetchData();\n  }, [newQuote])\n\n  return (\n    <div className=\"app\">\n      <h2>The Simpsons Quote Generator v2</h2>\n      <h4>(Mostly Homer)</h4>\n      <div className=\"container\" style={{ background: `url(${quote.image}) no-repeat right top` }}>\n        <div className=\"quotes\">\n          {quote.content.length > 0 && (\n            <div>\n              <blockquote>\n                <p>{quote.content}</p>\n                <footer>â€” {quote.autor}</footer>\n              </blockquote>\n              <span className='new-quote' onClick={() => setNewQuote(!newQuote)}>Get new quote</span>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\n"],"sourceRoot":""}